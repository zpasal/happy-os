	SECTION _TEXT CLASS=CODE USE32
	SECTION _DATA CLASS=DATA USE32
	SECTION _BSS  CLASS=BSS USE32
	SECTION cstartup CLASS=INITDATA USE32
	SECTION crundown CLASS=EXITDATA USE32
	SECTION cppinit  CLASS=CPPDATA USE32
	GROUP DGROUP _DATA _BSS

SECTION _TEXT
[GLOBAL	_KERNEL_START]
_KERNEL_START:
	MOV	ESP,0C0004000H
	MOV	DWORD [_kvideo],0B8000H
	PUSH	DWORD 0FA0H
	PUSH	BYTE 00H
	PUSH	DWORD [_kvideo]
	CALL	_memset
	ADD	ESP,BYTE 0CH
	CALL	_k_set_interrupts
	CALL	_k_set_memory
	CALL	_k_set_console
	CALL	_k_set_tasker
	CALL	_k_set_floppy
	PUSH	BYTE 028H
	PUSH	BYTE 020H
	CALL	_k_set_pic
	ADD	ESP,BYTE 08H
	PUSH	DWORD 0190H
	CALL	_malloc
	POP	ECX
	MOV	DWORD [_stacks],EAX
	PUSH	DWORD 0190H
	CALL	_malloc
	POP	ECX
	MOV	DWORD [04H+_stacks],EAX
	PUSH	DWORD 0190H
	CALL	_malloc
	POP	ECX
	MOV	DWORD [08H+_stacks],EAX
	MOV	DWORD [_sem],00H
	MOV	EAX,DWORD [_stacks]
	ADD	EAX,0162H
	PUSH	EAX
	LEA	EAX,[_task1]
	PUSH	EAX
	CALL	_k_add_task
	ADD	ESP,BYTE 08H
	MOV	EAX,DWORD [04H+_stacks]
	ADD	EAX,0162H
	PUSH	EAX
	LEA	EAX,[_task2]
	PUSH	EAX
	CALL	_k_add_task
	ADD	ESP,BYTE 08H
	MOV	EAX,DWORD [08H+_stacks]
	ADD	EAX,0162H
	PUSH	EAX
	LEA	EAX,[_task3]
	PUSH	EAX
	CALL	_k_add_task
	ADD	ESP,BYTE 08H
	STI
L_37:
L_35:
	MOVZX	EAX,BYTE [__scancode]
	CMP	EAX,081H
	JNE	SHORT	L_37
L_36:
	CALL	__hard_reboot
	RET
[GLOBAL	_delay]
_delay:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [EBP+08H]
	ADD	EBX,DWORD [__timer_counter]
L_38:
	CMP	EBX,DWORD [__timer_counter]
	JA	SHORT	L_38
	POP	EBX
	POP	EBP
	RET
[GLOBAL	_k_set_floppy]
_k_set_floppy:
	MOV	DWORD [__floppy_area],04000H
	RET
[GLOBAL	_k_set_tasker]
_k_set_tasker:
	MOV	DWORD [_total_tasks],01H
	MOV	DWORD [_idno],00H
	PUSH	BYTE 013H
	CALL	_malloc
	POP	ECX
	MOV	DWORD [_task_list],EAX
	MOV	EAX,DWORD [_task_list]
	MOV	ECX,DWORD [_task_list]
	MOV	DWORD [EAX+0BH],ECX
	MOV	EAX,DWORD [_task_list]
	MOV	DWORD [EAX+06H],00H
	MOV	EAX,DWORD [_task_list]
	MOV	BYTE [EAX+0AH],02H
	MOV	EAX,DWORD [_task_list]
	MOV	ECX,DWORD [_current_con]
	MOV	DWORD [EAX+0FH],ECX
	MOV	EAX,DWORD [_task_list]
	MOV	DWORD [_last_task],EAX
	MOV	EAX,DWORD [_task_list]
	MOV	DWORD [_current_task],EAX
	RET
[GLOBAL	_task1]
_task1:
	PUSH	EBX
	PUSH	ESI
	MOV	ESI,00H
	PUSH	BYTE 0FH
	CALL	_textcolor
	POP	ECX
	JMP	L_44
L_42:
	PUSH	BYTE 0AH
	PUSH	BYTE 01H
	CALL	_gotoxy
	ADD	ESP,BYTE 08H
	MOV	EAX,ESI
	INC	ESI
	PUSH	EAX
	LEA	EAX,[L_39]
	PUSH	EAX
	CALL	_cprintf
	ADD	ESP,BYTE 08H
	MOV	EAX,01H
L_40:
	XCHG	EAX,DWORD [_sem]
	OR	EAX,EAX
	JNZ	NEAR	L_40
	MOV	DWORD [_glob],01H
	MOV	EBX,00H
	JMP	L_48
L_46:
L_47:
	INC	EBX
L_48:
	CMP	EBX,BYTE 064H
	JL	SHORT	L_46
L_49:
	CMP	DWORD [_glob],BYTE 01H
	JE	SHORT	L_50
	LEA	EAX,[L_41]
	PUSH	EAX
	CALL	_cprintf
	POP	ECX
L_50:
	MOV	DWORD [_sem],00H
L_43:
L_44:
	JMP	L_42
L_45:
	POP	ESI
	POP	EBX
	RET
[GLOBAL	_task2]
_task2:
	PUSH	EBX
	PUSH	ESI
	MOV	ESI,00H
	PUSH	BYTE 04H
	CALL	_textcolor
	POP	ECX
	JMP	L_57
L_55:
	PUSH	BYTE 0BH
	PUSH	BYTE 01H
	CALL	_gotoxy
	ADD	ESP,BYTE 08H
	MOV	EAX,ESI
	INC	ESI
	PUSH	EAX
	LEA	EAX,[L_52]
	PUSH	EAX
	CALL	_cprintf
	ADD	ESP,BYTE 08H
	MOV	EAX,01H
L_53:
	XCHG	DWORD [_sem],EAX
	OR	EAX,EAX
	JNZ	NEAR	L_53
	MOV	DWORD [_glob],02H
	MOV	EBX,00H
	JMP	L_61
L_59:
L_60:
	INC	EBX
L_61:
	CMP	EBX,BYTE 064H
	JL	SHORT	L_59
L_62:
	CMP	DWORD [_glob],BYTE 02H
	JE	SHORT	L_63
	LEA	EAX,[L_54]
	PUSH	EAX
	CALL	_cprintf
	POP	ECX
L_63:
	MOV	DWORD [_sem],00H
L_56:
L_57:
	JMP	L_55
L_58:
	POP	ESI
	POP	EBX
	RET
[GLOBAL	_task3]
_task3:
	PUSH	EBX
	PUSH	ESI
	MOV	ESI,00H
	PUSH	BYTE 02H
	CALL	_textcolor
	POP	ECX
	JMP	L_70
L_68:
	PUSH	BYTE 0CH
	PUSH	BYTE 01H
	CALL	_gotoxy
	ADD	ESP,BYTE 08H
	PUSH	ESI
	LEA	EAX,[L_65]
	PUSH	EAX
	CALL	_cprintf
	ADD	ESP,BYTE 08H
	MOV	EAX,01H
L_66:
	XCHG	EAX,DWORD [_sem]
	OR	EAX,EAX
	JNZ	NEAR	L_66
	MOV	DWORD [_glob],03H
	MOV	EBX,00H
	JMP	L_74
L_72:
L_73:
	INC	EBX
L_74:
	CMP	EBX,0C8H
	JB	SHORT	L_72
L_75:
	CMP	DWORD [_glob],BYTE 03H
	JE	SHORT	L_76
	LEA	EAX,[L_67]
	PUSH	EAX
	CALL	_cprintf
	POP	ECX
L_76:
	MOV	DWORD [_sem],00H
L_69:
	INC	ESI
L_70:
	JMP	L_68
L_71:
	POP	ESI
	POP	EBX
	RET
[GLOBAL	_k_set_console]
_k_set_console:
	MOV	DWORD [_videobase],0B8000H
	PUSH	BYTE 03H
	CALL	_console_alloc
	POP	ECX
	MOV	DWORD [_current_con],EAX
	MOV	EAX,DWORD [_current_con]
	MOV	WORD [EAX+00H],00H
	MOV	EAX,DWORD [_current_con]
	MOV	ECX,DWORD [_videobase]
	MOV	DWORD [EAX+02H],ECX
	RET
[GLOBAL	_k_set_memory]
_k_set_memory:
	PUSH	EBX
	PUSH	ESI
	PUSH	EDI
	LEA	EDI,[_gdt]
	PUSH	BYTE 00H
	PUSH	BYTE 00H
	PUSH	BYTE 00H
	PUSH	BYTE 00H
	PUSH	EDI
	CALL	_set_gdt_entry
	ADD	ESP,BYTE 014H
	PUSH	DWORD 0C0H
	PUSH	DWORD 0FAH
	PUSH	DWORD 0FFFFFFH
	PUSH	BYTE 00H
	LEA	EAX,[EDI+08H]
	PUSH	EAX
	CALL	_set_gdt_entry
	ADD	ESP,BYTE 014H
	PUSH	DWORD 0C0H
	PUSH	DWORD 0F2H
	PUSH	DWORD 0FFFFFFH
	PUSH	BYTE 00H
	LEA	EAX,[EDI+010H]
	PUSH	EAX
	CALL	_set_gdt_entry
	ADD	ESP,BYTE 014H
	PUSH	DWORD 0C0H
	PUSH	DWORD 09AH
	PUSH	DWORD 0FFFFFFH
	PUSH	BYTE 00H
	LEA	EAX,[EDI+018H]
	PUSH	EAX
	CALL	_set_gdt_entry
	ADD	ESP,BYTE 014H
	PUSH	DWORD 0C0H
	PUSH	DWORD 092H
	PUSH	DWORD 0FFFFFFH
	PUSH	BYTE 00H
	LEA	EAX,[EDI+020H]
	PUSH	EAX
	CALL	_set_gdt_entry
	ADD	ESP,BYTE 014H
	MOV	DWORD [02H+_gdtr],EDI
	MOV	WORD [_gdtr],028H
	CALL	__flush_gdtr
	MOV	DWORD [_page_index],01H
	CALL	__init_bmp
	PUSH	BYTE 00H
	CALL	__allocate_bmp
	POP	ECX
	PUSH	BYTE 01H
	CALL	__allocate_bmp
	POP	ECX
	PUSH	BYTE 02H
	CALL	__allocate_bmp
	POP	ECX
	PUSH	BYTE 04H
	CALL	__allocate_bmp
	POP	ECX
	MOV	DWORD [_heap_start],0C0400000H
	MOV	EAX,DWORD [_heap_start]
	MOV	DWORD [_heap_end],EAX
	MOV	DWORD [_page_directory],00H
	MOV	DWORD [_page_table],01000H
	MOV	DWORD [_page_krnl],02000H
	MOV	DWORD [_page_heap],03000H
	CALL	_allocate_page
	MOV	EBX,EAX
	MOV	EAX,EBX
	OR	EAX,BYTE 07H
	MOV	ECX,DWORD [_page_directory]
	MOV	DWORD [ECX+0C04H],EAX
	PUSH	DWORD 01000H
	PUSH	BYTE 00H
	PUSH	EBX
	CALL	_memset
	ADD	ESP,BYTE 0CH
	CALL	_allocate_page
	MOV	EBX,EAX
	MOV	EAX,EBX
	OR	EAX,BYTE 07H
	MOV	ECX,DWORD [_page_heap]
	MOV	DWORD [ECX+00H],EAX
	ADD	DWORD [_heap_end],01000H
	CALL	__set_cr3
	MOV	ESI,DWORD [_heap_start]
	MOV	DWORD [ESI+04H],00H
	MOV	DWORD [ESI+08H],0FFFFFF00H
	MOV	DWORD [ESI+00H],0FF4H
	POP	EDI
	POP	ESI
	POP	EBX
	RET
[GLOBAL	_timer_handler]
_timer_handler:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,BYTE 04H
	CMP	DWORD [__floppy_shutoff],BYTE 00H
	JE	SHORT	L_78
	DEC	DWORD [__floppy_shutoff]
	CMP	DWORD [__floppy_shutoff],BYTE 00H
	JNE	SHORT	L_80
	PUSH	BYTE 0CH
	PUSH	DWORD 03F2H
	CALL	_outportb
	ADD	ESP,BYTE 08H
L_80:
L_78:
	INC	DWORD [__timer_counter]
	PUSH	BYTE 020H
	PUSH	BYTE 020H
	CALL	_outportb
	ADD	ESP,BYTE 08H
	CALL	_k_sheduler
	MOV	ESP,EBP
	POP	EBP
	RET
[GLOBAL	_keyboard_handler]
_keyboard_handler:
	PUSH	BYTE 060H
	CALL	_inportb
	POP	ECX
	MOV	BYTE [__scancode],AL
	PUSH	BYTE 020H
	PUSH	BYTE 020H
	CALL	_outportb
	ADD	ESP,BYTE 08H
	RET
[GLOBAL	_exec_handler]
_exec_handler:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,BYTE 04H
	PUSH	EBX
	PUSH	ESI
	PUSH	EDI
	MOV	EBX,DWORD [EBP+08H]
	MOVZX	EDI,WORD [EBP+0CH]
	MOVZX	EDI,DI
	MOV	EAX,DWORD [EDI*4+_interrupt_message+00H]
	MOV	DWORD [EBP+0FFFFFFFCH],EAX
	CLI
	MOV	EAX,DWORD [_task_list]
	MOV	EAX,DWORD [EAX+0FH]
	MOV	DWORD [_current_con],EAX
	PUSH	EBX
	PUSH	DWORD [EBP+0FFFFFFFCH]
	LEA	EAX,[L_82]
	PUSH	EAX
	CALL	_cprintf
	ADD	ESP,BYTE 0CH
	MOVZX	EDI,DI
	PUSH	EDI
	LEA	EAX,[L_83]
	PUSH	EAX
	CALL	_cprintf
	ADD	ESP,BYTE 08H
	PUSH	DWORD [EBP+014H]
	MOVZX	EAX,WORD [EBP+010H]
	PUSH	EAX
	LEA	EAX,[L_84]
	PUSH	EAX
	CALL	_cprintf
	ADD	ESP,BYTE 0CH
	MOVZX	EAX,WORD [EBP+018H]
	PUSH	EAX
	LEA	EAX,[L_85]
	PUSH	EAX
	CALL	_cprintf
	ADD	ESP,BYTE 08H
	TEST	EBX,EBX
	JNE	SHORT	L_90
	LEA	EAX,[L_86]
	PUSH	EAX
	CALL	_cprintf
	POP	ECX
L_92:
L_93:
L_94:
	JMP	L_92
L_95:
	JMP	L_91
L_90:
	PUSH	EBX
	LEA	EAX,[L_87]
	PUSH	EAX
	CALL	_cprintf
	ADD	ESP,BYTE 08H
	PUSH	EBX
	CALL	_k_kill_task
	POP	ECX
	MOV	ESI,EAX
	TEST	ESI,ESI
	JNE	SHORT	L_96
	LEA	EAX,[L_88]
	PUSH	EAX
	CALL	_cputs
	POP	ECX
	JMP	L_97
L_96:
	LEA	EAX,[L_89]
	PUSH	EAX
	CALL	_cputs
	POP	ECX
L_97:
	CALL	_k_sheduler
L_91:
	POP	EDI
	POP	ESI
	POP	EBX
	MOV	ESP,EBP
	POP	EBP
	RET
[GLOBAL	_reboot]
_reboot:
	PUSH	EBX
	CLI
L_98:
	PUSH	BYTE 064H
	CALL	_inportb
	POP	ECX
	MOVZX	EAX,AL
	MOV	EBX,EAX
	MOV	EAX,EBX
	AND	EAX,BYTE 01H
	JE	SHORT	L_100
	PUSH	BYTE 060H
	CALL	_inportb
	POP	ECX
	JMP	L_98
L_100:
	MOV	EAX,EBX
	AND	EAX,BYTE 02H
	JNE	NEAR	L_98
L_99:
	PUSH	DWORD 0FEH
	PUSH	BYTE 064H
	CALL	_outportb
	ADD	ESP,BYTE 08H
L_102:
	JMP	L_102

L_89:
	DB	04BH,049H,04CH,04CH,045H,044H,0AH,0DH,00H
L_88:
	DB	046H,041H,049H,04CH,045H,044H,021H,021H,021H,0AH,0DH,00H
L_87:
	DB	04BH,069H,06CH,06CH,069H,06EH,067H,020H,074H,061H,073H,06BH
	DB	020H,025H,075H,020H,02EH,02EH,02EH,020H,00H
L_86:
	DB	04BH,065H,072H,06EH,065H,06CH,020H,06DH,061H,06BH,065H,020H
	DB	074H,068H,069H,073H,020H,065H,072H,072H,06FH,072H,021H,020H
	DB	053H,079H,073H,074H,065H,06DH,020H,048H,061H,06CH,074H,065H
	DB	064H,021H,00H
L_85:
	DB	045H,072H,072H,06FH,072H,020H,043H,06FH,064H,065H,03AH,020H
	DB	025H,030H,034H,058H,0AH,0DH,00H
L_84:
	DB	041H,074H,020H,061H,064H,064H,072H,065H,073H,073H,03AH,020H
	DB	025H,030H,034H,058H,03AH,025H,030H,038H,058H,0AH,0DH,00H
L_83:
	DB	049H,06EH,074H,065H,072H,072H,075H,070H,074H,020H,03AH,020H
	DB	025H,030H,032H,058H,0AH,0DH,00H
L_82:
	DB	049H,06EH,074H,065H,072H,072H,075H,070H,074H,020H,03AH,020H
	DB	025H,073H,020H,066H,072H,06FH,06DH,020H,074H,061H,073H,06BH
	DB	020H,025H,075H,0AH,0DH,00H
L_67:
	DB	020H,06BH,075H,064H,020H,06BH,06FH,06AH,069H,020H,06DH,069H
	DB	06CH,069H,020H,06DH,06FH,06AH,069H,021H,020H,033H,00H
L_65:
	DB	054H,061H,073H,06BH,020H,033H,020H,05BH,025H,075H,05DH,00H
L_54:
	DB	020H,065H,020H,06DH,06FH,07AH,065H,073H,020H,067H,061H,020H
	DB	073H,061H,064H,061H,020H,06AH,02EH,02EH,02EH,02EH,02EH,020H
	DB	020H,032H,00H
L_52:
	DB	054H,061H,073H,06BH,020H,032H,020H,05BH,025H,075H,05DH,00H
L_41:
	DB	020H,041H,06AH,06DH,065H,020H,06DH,065H,06EH,069H,020H,031H
	DB	00H
L_39:
	DB	054H,061H,073H,06BH,020H,031H,020H,05BH,025H,075H,05DH,00H
L_34:
	DB	049H,052H,051H,05BH,031H,035H,05DH,00H
L_33:
	DB	049H,052H,051H,05BH,031H,034H,05DH,00H
L_32:
	DB	049H,052H,051H,05BH,031H,033H,05DH,00H
L_31:
	DB	049H,052H,051H,05BH,031H,032H,05DH,00H
L_30:
	DB	049H,052H,051H,05BH,031H,031H,05DH,00H
L_29:
	DB	049H,052H,051H,05BH,031H,030H,05DH,00H
L_28:
	DB	049H,052H,051H,05BH,039H,05DH,00H
L_27:
	DB	049H,052H,051H,05BH,038H,05DH,00H
L_26:
	DB	049H,052H,051H,05BH,037H,05DH,00H
L_25:
	DB	02AH,049H,052H,051H,05BH,036H,05DH,00H
L_24:
	DB	049H,052H,051H,05BH,035H,05DH,00H
L_23:
	DB	049H,052H,051H,05BH,034H,05DH,00H
L_22:
	DB	049H,052H,051H,05BH,033H,05DH,00H
L_21:
	DB	049H,052H,051H,05BH,032H,05DH,00H
L_20:
	DB	02AH,049H,052H,051H,05BH,031H,05DH,00H
L_19:
	DB	02AH,049H,052H,051H,05BH,030H,05DH,00H
L_18:
	DB	055H,04EH,04BH,04EH,04FH,057H,04EH,020H,049H,04EH,054H,045H
	DB	052H,052H,055H,050H,054H,00H
L_17:
	DB	043H,06FH,070H,072H,06FH,063H,065H,073H,073H,06FH,072H,020H
	DB	045H,072H,072H,06FH,072H,00H
L_16:
	DB	050H,061H,072H,069H,074H,079H,020H,065H,072H,072H,06FH,072H
	DB	03FH,00H
L_15:
	DB	050H,061H,067H,065H,020H,046H,061H,075H,06CH,074H,00H
L_14:
	DB	047H,065H,06EH,065H,072H,061H,06CH,020H,050H,072H,06FH,074H
	DB	065H,063H,074H,069H,06FH,06EH,020H,046H,061H,075H,06CH,074H
	DB	00H
L_13:
	DB	053H,074H,061H,063H,06BH,020H,045H,078H,063H,065H,070H,074H
	DB	069H,06FH,06EH,00H
L_12:
	DB	053H,065H,067H,06DH,065H,06EH,074H,020H,04EH,06FH,074H,020H
	DB	050H,072H,065H,073H,065H,06EH,074H,065H,064H,00H
L_11:
	DB	049H,06EH,076H,061H,06CH,069H,064H,020H,054H,053H,053H,00H
L_10:
	DB	043H,06FH,070H,072H,06FH,063H,065H,073H,073H,06FH,072H,020H
	DB	053H,065H,067H,06DH,065H,06EH,074H,020H,04FH,076H,065H,072H
	DB	072H,075H,06EH,00H
L_9:
	DB	044H,06FH,075H,062H,06CH,065H,020H,046H,061H,075H,06CH,074H
	DB	00H
L_8:
	DB	043H,06FH,070H,072H,06FH,063H,065H,073H,073H,06FH,072H,020H
	DB	04EH,06FH,074H,020H,041H,076H,061H,06CH,069H,061H,062H,06CH
	DB	065H,00H
L_7:
	DB	049H,06EH,076H,061H,06CH,069H,064H,020H,04FH,070H,063H,06FH
	DB	064H,065H,00H
L_6:
	DB	042H,06FH,075H,06EH,064H,020H,043H,068H,065H,063H,06BH,020H
	DB	05BH,062H,06FH,075H,06EH,064H,05DH,00H
L_5:
	DB	04FH,076H,065H,072H,066H,06CH,06FH,077H,020H,05BH,069H,06EH
	DB	074H,06FH,05DH,00H
L_4:
	DB	042H,072H,065H,061H,06BH,070H,06FH,069H,06EH,074H,020H,05BH
	DB	069H,06EH,074H,020H,030H,033H,05DH,00H
L_3:
	DB	04EH,06FH,06EH,020H,04DH,061H,073H,06BH,061H,062H,06CH,065H
	DB	020H,049H,06EH,074H,065H,072H,072H,075H,070H,074H,00H
L_2:
	DB	044H,065H,062H,075H,067H,020H,045H,078H,063H,065H,070H,074H
	DB	069H,06FH,06EH,00H
L_1:
	DB	044H,069H,076H,069H,064H,065H,020H,045H,072H,072H,06FH,072H
	DB	00H
SECTION _DATA
[GLOBAL	__timer_counter]

__timer_counter	DD	00H
[GLOBAL	__scancode]

__scancode	DB	00H
	RESB	03H
[GLOBAL	_interrupt_message]

_interrupt_message	DD	L_1,L_2,L_3,L_4,L_5,L_6,L_7
	DD	L_8,L_9,L_10,L_11,L_12,L_13,L_14
	DD	L_15,L_16,L_17,L_18,L_18,L_18,L_18
	DD	L_18,L_18,L_18,L_18,L_18,L_18,L_18
	DD	L_18,L_18,L_18,L_18,L_19,L_20,L_21
	DD	L_22,L_23,L_24,L_25,L_26,L_27,L_28
	DD	L_29,L_30,L_31,L_32,L_33,L_34
SECTION _BSS
[GLOBAL	_gdt]

_gdt	RESB	028H
[GLOBAL	_gdtr]

_gdtr	RESB	06H
	RESB	02H
[GLOBAL	_videobase]

_videobase	RESB	04H
[GLOBAL	_kvideo]

_kvideo	RESB	04H
[GLOBAL	_glob]

_glob	RESB	04H
[GLOBAL	_sem]

_sem	RESB	04H

SECTION _TEXT
[EXTERN	_set_gdt_entry]
[EXTERN	_cprintf]
[EXTERN	__set_cr3]
[EXTERN	_allocate_page]
[EXTERN	_inportb]
[EXTERN	_malloc]
[EXTERN	_k_kill_task]
[EXTERN	_outportb]
[EXTERN	_memset]
[EXTERN	_k_set_pic]
[EXTERN	__hard_reboot]
[EXTERN	__init_bmp]
[EXTERN	_gotoxy]
[EXTERN	_k_sheduler]
[EXTERN	__flush_gdtr]
[EXTERN	_console_alloc]
[EXTERN	_cputs]
[EXTERN	_k_add_task]
[EXTERN	__allocate_bmp]
[EXTERN	_k_set_interrupts]
[EXTERN	_textcolor]

SECTION _DATA
[EXTERN	_page_table]
[EXTERN	_current_task]
[EXTERN	_heap_end]
[EXTERN	_total_tasks]
[EXTERN	_current_con]
[EXTERN	_last_task]
[EXTERN	_heap_start]
[EXTERN	_page_directory]
[EXTERN	_page_krnl]
[EXTERN	_page_heap]
[EXTERN	__floppy_shutoff]
[EXTERN	_page_index]
[EXTERN	_stacks]
[EXTERN	_idno]
[EXTERN	_task_list]
[EXTERN	__floppy_area]
